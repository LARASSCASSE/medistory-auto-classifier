#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test automatis√© pour le syst√®me M√©distory
Lance le syst√®me avec des documents de test et v√©rifie les r√©sultats
"""

import os
import sys
import time
import shutil
from pathlib import Path
from datetime import datetime
import subprocess

# Ajouter le r√©pertoire parent au path pour importer le module principal
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class MedistoryTester:
    """Gestionnaire de tests pour le syst√®me M√©distory"""

    def __init__(self):
        self.test_root = Path(__file__).parent
        self.project_root = self.test_root.parent

        # Dossiers de test
        self.docs_test = self.test_root / "documents_test"
        self.scans_entrants = self.test_root / "scans_entrants"
        self.scans_traites = self.test_root / "scans_traites"
        self.base_patients = self.test_root / "base_patients"

        # Statistiques
        self.stats = {
            'total': 0,
            'success': 0,
            'failed': 0,
            'patient_not_found': 0,
            'low_confidence': 0,
            'no_text': 0,
            'no_name': 0,
            'details': []
        }

    def setup(self):
        """Pr√©parer l'environnement de test"""
        print("üîß Pr√©paration de l'environnement de test")
        print("=" * 60)

        # Nettoyer les dossiers de test
        for folder in [self.scans_entrants, self.scans_traites]:
            if folder.exists():
                shutil.rmtree(folder)
            folder.mkdir(parents=True, exist_ok=True)

        # Cr√©er le dossier base_patients s'il n'existe pas
        self.base_patients.mkdir(parents=True, exist_ok=True)

        # Copier la liste de patients
        patients_src = self.test_root / "fake_patients.txt"
        if patients_src.exists():
            shutil.copy(patients_src, self.base_patients / "patients.txt")
            print(f"  ‚úì Liste de patients copi√©e: {self.base_patients / 'patients.txt'}")

        print(f"  ‚úì Dossiers cr√©√©s:")
        print(f"    - Scans entrants: {self.scans_entrants}")
        print(f"    - Scans trait√©s: {self.scans_traites}")
        print(f"    - Base patients: {self.base_patients}")

    def generate_documents(self):
        """G√©n√©rer les documents de test"""
        print("\nüìÑ G√©n√©ration des documents de test")
        print("=" * 60)

        gen_script = self.test_root / "generate_fake_documents.py"

        if not gen_script.exists():
            print("  ‚úó Script de g√©n√©ration introuvable!")
            return False

        # Changer vers le r√©pertoire test_env pour que les documents soient g√©n√©r√©s au bon endroit
        os.chdir(self.test_root)

        try:
            result = subprocess.run(
                [sys.executable, str(gen_script)],
                capture_output=True,
                text=True,
                timeout=30
            )

            if result.returncode == 0:
                print(result.stdout)
                return True
            else:
                print(f"  ‚úó Erreur lors de la g√©n√©ration: {result.stderr}")
                return False
        except Exception as e:
            print(f"  ‚úó Exception: {e}")
            return False

    def list_test_documents(self):
        """Lister tous les documents de test disponibles"""
        docs = list(self.docs_test.glob("*.pdf"))

        print(f"\nüìã Documents de test disponibles: {len(docs)}")
        print("=" * 60)

        for doc in sorted(docs):
            print(f"  - {doc.name}")

        return docs

    def simulate_scan_arrival(self, documents, delay=1):
        """Simuler l'arriv√©e de documents scann√©s"""
        print(f"\nüîÑ Simulation de l'arriv√©e de {len(documents)} documents")
        print("=" * 60)

        for i, doc in enumerate(documents, 1):
            dest = self.scans_entrants / doc.name
            shutil.copy(doc, dest)
            print(f"  [{i}/{len(documents)}] üì• {doc.name} ‚Üí scans_entrants/")
            time.sleep(delay)

        print(f"\n‚è≥ Attente du traitement ({delay * 2}s)...")
        time.sleep(delay * 2)

    def analyze_results(self):
        """Analyser les r√©sultats du traitement"""
        print("\nüìä Analyse des r√©sultats")
        print("=" * 60)

        # Compter les documents trait√©s
        traites = list(self.scans_traites.glob("*.pdf"))
        non_traites_dir = self.scans_traites / "NON_TRAITES"
        non_traites = list(non_traites_dir.glob("*.pdf")) if non_traites_dir.exists() else []

        self.stats['total'] = len(traites) + len(non_traites)
        self.stats['success'] = len(traites)
        self.stats['failed'] = len(non_traites)

        # Analyser les documents trait√©s avec succ√®s
        print("\n‚úÖ Documents trait√©s avec succ√®s:")
        if traites:
            for doc in sorted(traites):
                print(f"  ‚úì {doc.name}")
                self.stats['details'].append({
                    'file': doc.name,
                    'status': 'success',
                    'location': str(doc)
                })
        else:
            print("  Aucun")

        # Analyser les documents non trait√©s
        print("\n‚ùå Documents non trait√©s:")
        if non_traites:
            for doc in sorted(non_traites):
                reason = doc.name.split('_')[0] if '_' in doc.name else 'unknown'
                print(f"  ‚úó {doc.name} (raison: {reason})")

                self.stats['details'].append({
                    'file': doc.name,
                    'status': 'failed',
                    'reason': reason,
                    'location': str(doc)
                })

                # Compter par type d'erreur
                if reason in self.stats:
                    self.stats[reason] += 1
        else:
            print("  Aucun")

        # Documents encore en attente
        en_attente = list(self.scans_entrants.glob("*.pdf"))
        if en_attente:
            print("\n‚è≥ Documents en attente de traitement:")
            for doc in sorted(en_attente):
                print(f"  ‚è≥ {doc.name}")

    def generate_report(self):
        """G√©n√©rer un rapport de test"""
        print("\n" + "=" * 60)
        print("üìà RAPPORT DE TEST FINAL")
        print("=" * 60)

        total = self.stats['total']
        success = self.stats['success']
        failed = self.stats['failed']

        success_rate = (success / total * 100) if total > 0 else 0

        print(f"\nüéØ Statistiques globales:")
        print(f"  Total de documents: {total}")
        print(f"  Succ√®s: {success} ({success_rate:.1f}%)")
        print(f"  √âchecs: {failed} ({100-success_rate:.1f}%)")

        if failed > 0:
            print(f"\nüîç D√©tail des √©checs:")
            print(f"  - Patient non trouv√©: {self.stats['patient_not_found']}")
            print(f"  - Confiance trop faible: {self.stats['low_confidence']}")
            print(f"  - Aucun texte extrait: {self.stats['no_text']}")
            print(f"  - Aucun nom trouv√©: {self.stats['no_name']}")

        # √âvaluation globale
        print(f"\nüíØ √âvaluation:")
        if success_rate >= 90:
            print("  üåü EXCELLENT - Le syst√®me fonctionne tr√®s bien!")
        elif success_rate >= 70:
            print("  ‚úÖ BON - Le syst√®me fonctionne correctement avec quelques am√©liorations possibles")
        elif success_rate >= 50:
            print("  ‚ö†Ô∏è  MOYEN - Le syst√®me n√©cessite des am√©liorations")
        else:
            print("  ‚ùå FAIBLE - Le syst√®me n√©cessite des corrections importantes")

        # Sauvegarder le rapport
        report_file = self.test_root / f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(f"Rapport de test M√©distory - {datetime.now()}\n")
            f.write("=" * 60 + "\n\n")
            f.write(f"Total: {total}\n")
            f.write(f"Succ√®s: {success} ({success_rate:.1f}%)\n")
            f.write(f"√âchecs: {failed}\n\n")
            f.write("D√©tails:\n")
            for detail in self.stats['details']:
                f.write(f"  - {detail}\n")

        print(f"\nüìÑ Rapport sauvegard√©: {report_file}")

    def run_manual_test(self):
        """Ex√©cuter un test manuel avec le syst√®me principal"""
        print("\nüöÄ Lancement du test avec le syst√®me M√©distory")
        print("=" * 60)

        # Importer et configurer le syst√®me principal
        try:
            # Modifier temporairement la configuration
            import medistory_auto_classifier as mac

            # Override des chemins de configuration
            mac.WATCHED_FOLDER = str(self.scans_entrants)
            mac.PROCESSED_FOLDER = str(self.scans_traites)
            mac.LOG_FILE = str(self.test_root / "test.log")

            print(f"  ‚úì Configuration adapt√©e pour les tests")
            print(f"    - Dossier surveill√©: {mac.WATCHED_FOLDER}")
            print(f"    - Dossier trait√©s: {mac.PROCESSED_FOLDER}")

            # Initialiser le syst√®me
            patient_db_path = self.base_patients / "patients.txt"
            patient_db = mac.PatientDatabase(str(patient_db_path))
            patient_db.load_from_file()

            processor = mac.DocumentProcessor(patient_db)

            print(f"\n  ‚úì Syst√®me initialis√© avec {len(patient_db.patients_cache)} patients")

            # Traiter manuellement chaque document
            documents = list(self.scans_entrants.glob("*.pdf"))

            for doc in documents:
                print(f"\n  üìÑ Traitement: {doc.name}")
                result = processor.process_document(str(doc))

                if result['success']:
                    print(f"    ‚úì Patient: {result['nom']} {result['prenom']}")
                    print(f"    ‚úì Confiance: {result['confidence']:.2%}")

                    # D√©placer vers trait√©s
                    dest = self.scans_traites / f"{result['nom']}_{result['prenom']}_{doc.name}"
                    shutil.move(doc, dest)
                else:
                    reason = result.get('reason', 'unknown')
                    print(f"    ‚úó √âchec: {reason}")

                    if 'extracted_name' in result:
                        print(f"    ‚ÑπÔ∏è  Nom extrait: {result['extracted_name']}")

                    # D√©placer vers non trait√©s
                    non_traites_dir = self.scans_traites / "NON_TRAITES"
                    non_traites_dir.mkdir(exist_ok=True)
                    dest = non_traites_dir / f"{reason}_{doc.name}"
                    shutil.move(doc, dest)

            return True

        except Exception as e:
            print(f"  ‚úó Erreur: {e}")
            import traceback
            traceback.print_exc()
            return False

    def run_full_test(self):
        """Ex√©cuter le test complet"""
        print("\n" + "=" * 60)
        print("üß™ TEST AUTOMATIQUE DU SYST√àME M√âDISTORY")
        print("=" * 60)
        print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        # 1. Setup
        self.setup()

        # 2. G√©n√©rer les documents
        if not self.generate_documents():
            print("\n‚ùå √âchec de la g√©n√©ration des documents")
            return

        # 3. Lister les documents
        documents = self.list_test_documents()

        if not documents:
            print("\n‚ùå Aucun document de test trouv√©")
            return

        # 4. Simuler l'arriv√©e des scans
        self.simulate_scan_arrival(documents, delay=0.5)

        # 5. Lancer le traitement manuel
        if not self.run_manual_test():
            print("\n‚ùå √âchec du traitement")
            return

        # 6. Analyser les r√©sultats
        self.analyze_results()

        # 7. G√©n√©rer le rapport
        self.generate_report()


def main():
    """Point d'entr√©e principal"""
    tester = MedistoryTester()
    tester.run_full_test()


if __name__ == "__main__":
    main()
